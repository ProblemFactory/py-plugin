# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from core.rpc import type_pb2 as core_dot_rpc_dot_type__pb2


class ChannelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Option = channel.unary_unary(
                '/hello.Channel/Option',
                request_serializer=core_dot_rpc_dot_type__pb2.OptionCode.SerializeToString,
                response_deserializer=core_dot_rpc_dot_type__pb2.ResponseCode.FromString,
                )
        self.UnaryToUnary = channel.unary_unary(
                '/hello.Channel/UnaryToUnary',
                request_serializer=core_dot_rpc_dot_type__pb2.Request.SerializeToString,
                response_deserializer=core_dot_rpc_dot_type__pb2.Response.FromString,
                )
        self.UnaryToStream = channel.unary_stream(
                '/hello.Channel/UnaryToStream',
                request_serializer=core_dot_rpc_dot_type__pb2.Request.SerializeToString,
                response_deserializer=core_dot_rpc_dot_type__pb2.Response.FromString,
                )
        self.StreamToUnary = channel.stream_unary(
                '/hello.Channel/StreamToUnary',
                request_serializer=core_dot_rpc_dot_type__pb2.Request.SerializeToString,
                response_deserializer=core_dot_rpc_dot_type__pb2.Response.FromString,
                )
        self.StreamToStream = channel.stream_stream(
                '/hello.Channel/StreamToStream',
                request_serializer=core_dot_rpc_dot_type__pb2.Request.SerializeToString,
                response_deserializer=core_dot_rpc_dot_type__pb2.Response.FromString,
                )


class ChannelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Option(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnaryToUnary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnaryToStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamToUnary(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamToStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChannelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Option': grpc.unary_unary_rpc_method_handler(
                    servicer.Option,
                    request_deserializer=core_dot_rpc_dot_type__pb2.OptionCode.FromString,
                    response_serializer=core_dot_rpc_dot_type__pb2.ResponseCode.SerializeToString,
            ),
            'UnaryToUnary': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryToUnary,
                    request_deserializer=core_dot_rpc_dot_type__pb2.Request.FromString,
                    response_serializer=core_dot_rpc_dot_type__pb2.Response.SerializeToString,
            ),
            'UnaryToStream': grpc.unary_stream_rpc_method_handler(
                    servicer.UnaryToStream,
                    request_deserializer=core_dot_rpc_dot_type__pb2.Request.FromString,
                    response_serializer=core_dot_rpc_dot_type__pb2.Response.SerializeToString,
            ),
            'StreamToUnary': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamToUnary,
                    request_deserializer=core_dot_rpc_dot_type__pb2.Request.FromString,
                    response_serializer=core_dot_rpc_dot_type__pb2.Response.SerializeToString,
            ),
            'StreamToStream': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamToStream,
                    request_deserializer=core_dot_rpc_dot_type__pb2.Request.FromString,
                    response_serializer=core_dot_rpc_dot_type__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hello.Channel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Channel(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Option(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Channel/Option',
            core_dot_rpc_dot_type__pb2.OptionCode.SerializeToString,
            core_dot_rpc_dot_type__pb2.ResponseCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnaryToUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Channel/UnaryToUnary',
            core_dot_rpc_dot_type__pb2.Request.SerializeToString,
            core_dot_rpc_dot_type__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnaryToStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/hello.Channel/UnaryToStream',
            core_dot_rpc_dot_type__pb2.Request.SerializeToString,
            core_dot_rpc_dot_type__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamToUnary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/hello.Channel/StreamToUnary',
            core_dot_rpc_dot_type__pb2.Request.SerializeToString,
            core_dot_rpc_dot_type__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamToStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/hello.Channel/StreamToStream',
            core_dot_rpc_dot_type__pb2.Request.SerializeToString,
            core_dot_rpc_dot_type__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
